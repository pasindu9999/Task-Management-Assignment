package com.example.taskmanagerapi.service;

import com.example.taskmanagerapi.dto.TaskDto;
import com.example.taskmanagerapi.exception.TaskNotFoundException;
import com.example.taskmanagerapi.mapper.TaskMapper;
import com.example.taskmanagerapi.model.Task;
import com.example.taskmanagerapi.repository.TaskRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class TaskServiceImpl implements TaskService {

    private final TaskRepository taskRepository;

    @Autowired
    public TaskServiceImpl(TaskRepository taskRepository) {
        this.taskRepository = taskRepository;
    }

    @Override
    public List<TaskDto> getAllTasks() {
        return TaskMapper.toDtoList(taskRepository.findAll());
    }

    @Override
    public TaskDto getTaskById(String id) {
        Task task = taskRepository.findById(id)
                .orElseThrow(() -> new TaskNotFoundException("Task not found with id: " + id));
        return TaskMapper.toDto(task);
    }

    @Override
    public TaskDto createTask(TaskDto taskDto) {
        Task task = TaskMapper.toEntity(taskDto);
        task.setCreatedAt(LocalDateTime.now()); // Set creation timestamp
        // ID is generated by MongoDB, so we don't set it from DTO for new tasks
        task.setId(null);
        Task savedTask = taskRepository.save(task);
        return TaskMapper.toDto(savedTask);
    }

    @Override
    public TaskDto updateTask(String id, TaskDto taskDto) {
        Task existingTask = taskRepository.findById(id)
                .orElseThrow(() -> new TaskNotFoundException("Task not found with id: " + id));

        // Update fields from DTO
        existingTask.setTitle(taskDto.getTitle());
        existingTask.setDescription(taskDto.getDescription());
        existingTask.setStatus(taskDto.getStatus());
        // createdAt should not be updated, id remains the same

        Task updatedTask = taskRepository.save(existingTask);
        return TaskMapper.toDto(updatedTask);
    }

    @Override
    public void deleteTask(String id) {
        if (!taskRepository.existsById(id)) {
            throw new TaskNotFoundException("Task not found with id: " + id);
        }
        taskRepository.deleteById(id);
    }
}
